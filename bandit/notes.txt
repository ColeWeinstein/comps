Notes for bandit wargames.

-------------------------------------------------------------------------------

bandit0

ssh into system with "ssh -p 2220 bandit0@bandit.labs.overthewire.org"
password: bandit0

found: password for bandit1 in "readme" - NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL
    >ls
    >cat readme

-------------------------------------------------------------------------------

bandit1

password for bandit2 stored in file with name "-" in home dir
"-" shows up with ls, but "cat -" means that cat starts reading from stdin
    fixed by using a slightly extended filepath: "./-"

found: password for bandit2 in "-" - rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi
    >ls
    >cat ./-

-------------------------------------------------------------------------------

bandit2

password for bandit3 stored in file with name "spaces in this filename" in home
dir
commands don't like spaces in file names, but this can be fixed by wrapping the
filename in quotes: 'cat "spaces in this filename"'

found: password for bandit3 in "spaces in this filename" - 
aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG
    >ls
    >cat "spaces in this filename"

-------------------------------------------------------------------------------

bandit3

password for bandit4 stored in hidden file ".hidden" in subdirectory "inhere". 
hidden files can be found using "ls -a"

found: password for bandit4 in "~/inhere/.hidden" - 
2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe
    >ls
    >cd inhere
    >ls -a
    >cat .hidden

-------------------------------------------------------------------------------

bandit4

password for bandit5 stored in only human readable file in subdirectory 
"inhere". the command "file" takes a filename and returns the type of the file.

an ls of ~/inhere/ shows that there exist files -file00 through -file09. we can
run file on all of them via the command "file ./-file*", where the star is a
regex for any following character sequence. (note the ./ in the filepath to get
around the "-" in the filenames.) executing this command reveals that -file07
is the only "ASCII text" type file, and that all others are type "data". 

found: password for bandit5 in "~/inhere/-file07" - 
lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR
    >ls
    >cd inhere
    >file ./-file*
    >cat ./-file07

-------------------------------------------------------------------------------

bandit5

password for bandit6 stored in a file which is human-readable, 1033 bytes in
size, and not executable. home directory has folder "inhere", which has 20
subdirectories of its own.

"find" is a helpful command here. we can test for correct file size using 
"-size 1033c", and we can test whether a file is executable using "-executable",
(negated using "!"). 

we can then take the files that match and run "file" on them, such that we see 
which are human-readable. this can be done with find's "-exec" flag, which 
executes a given command.

found: password for bandit6 in "~/inhere/maybehere07/.file2" - 
P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU
    >cd inhere
    >find -size 1033c \! -executable -exec find '{}' \;
    (some esacping done to protect certain characters from interpretation by
     the shell; {} replaced in execution of "file" as current filename)

-------------------------------------------------------------------------------

bandit6

password for bandit7 stored in a file somewhere on the server which is owned by
bandit7, in group bandit6, and is 33 bytes long.

the find command can deal with all of these. the flag "-group bandit6" filters
out files not in the right group, "-user bandit7" filters out files not owned
by the correct user, and "-size 33c" filters out files that aren't 33 bytes in
size. we can also tell find to start from the root dir (/).

found: password for bandit7 in "/var/lib/dpkg/info/bandit7.password" - 
z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S
    >find / -user bandit7 -group bandit6 -size 33c 2>&-
     ("2>&-" filters out all permission denied errors by closing stderr)
    >cat /var/lib/dpkg/info/bandit7.password

-------------------------------------------------------------------------------

bandit7

password for bandit8 stored in data.txt next to the word "millionth".

grep allows us to search files for matching expressions. in this case, data.txt
is formatted such that each line is a word, followed by a tab, followed by a
password. we can grep data.txt for the "millionth" to return the line which
contains "millionth" and get the password stored in the same line.

found: password for bandit8 in "data.txt" - TESKZC0XvTetK0S9xNwm25STk5iWrBvP
    >ls
    >grep millionth data.txt

-------------------------------------------------------------------------------

bandit8

password for bandit9 is the only unique line in data.txt.

"uniq" allows us to display or omit duplicated lines. however, it only counts a
line as duplicated if the duplicated lines are adjacent. fortunately, we can
sort the lines in data.txt using the "sort" command, and then we can pipe the
output of sort into unique to find the single unique line in the file.

found: password for bandit9 in "data.txt" - EN632PlfYiZbn3PhVK3XOGSlNInNE00t
    >ls
    >sort data.txt | uniq -u

-------------------------------------------------------------------------------

bandit9

password for bandit10 is stored in the binary file data.txt as one of the few 
human-readable strings in the file, preceded by several equal signs.

"strings" displays all of the human-readable strings in a file. we can use
strings on data.txt, and then filter the output to only show lines with three
or more "=" characters by piping the output into grep.

found: password for bandit10 in "data.txt" - G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s
    >ls
    >strings data.txt | grep ===

-------------------------------------------------------------------------------

bandit10

password for bandit11 is stored in the base64 encoded file data.txt.

files can be encoded in base64 for a variety of reasons. "base64" allows for
encoding and decoding of files in the command line. a file encoded in base64
can be decoded using the "-d" flag.

found: password for bandit11 in decoded "data.txt" - 
6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM
    >ls
    >base64 -d data.txt

-------------------------------------------------------------------------------

bandit11

password for bandit12 is stored in data.txt, where each of [A-Z] and [a-z] have
been "rotated" 13 positions.

"tr" translates one set of characters to another set of characters. we can
design one tr command to rotate all uppercase characters 13 positions, and
another to rotate all lowercase characters 13 positions, and combine them to
decode the "data.txt" file.

found: password for bandit12 in decoded "data.txt" -
JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv
    >ls
    >cat data.txt | tr [:upper:] NOPQRSTUVWXYZABCDEFGHIJKLM | tr [:lower:]
     nopqrstuvwxyzabcdefghijklm

-------------------------------------------------------------------------------

bandit12

password for bandit13 is stored in data.txt, which has been compressed multiple
times.

we can uncompress a file using "gzip", "bzip2", or "tar", depending on the 
file's format. we can check the file format using "file". whenever we extract a
file to an output file, we use file to see which type of compression the output
file is under, then we rename the output file to have the appropriate suffix,
extract it with the appropriate command, and repeat.

found: password for bandit13 in decompressed "data8" -
wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw
    >ls
    >xxd -r data.txt data
    >file data
    >mv data data.gz
    >gzip -d data.gz
     (gzip -d creates output file with same name as input file, without suffix)
    >file data
    >mv data data.bz2
    >bzip -d data.bz2
     (bzip2 names output files like gzip)
    >file data
    >mv data data.gz
    >gzip -d data.gz
    >file data
    >mv data data.tar
    >tar -xvf data.tar
     (tar prints name of output file)
    >file data5.bin
    >tar -xvf data5.bin
    >file data6.bin
    >mv data6.bin data6.bz2
    >bzip2 -d data6.bz2
    >file data6
    >tar -xvf data6
    >file data8.bin
    >mv data8.bin data8.gz
    >gzip -d data8.gz
    >file data8
    >cat data8

-------------------------------------------------------------------------------

bandit13

the password for bandit14 is only readable by bandit14. instead, a private key
for an ssh connection into bandit14 is present in the home directory and is 
viewable by bandit13.

ssh can authenticate a login with a private key (instead of the default
password authentication) using the "-i" flag and specifying the file containing
the private key. once we login to bandit14, we can retrive the login password
for bandit14.

found: password for bandit14 in /etc/bandit_pass/bandit14 (only viewable by
bandit14) - fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq
    >ls
    >ssh -i sshkey.private -p 2220 bandit14@localhost
    >cat /etc/bandit_pass/bandit14

-------------------------------------------------------------------------------

bandit14

the password for bandit15 is received when sumbitting the password for bandit14
to port 30000 on localhost.

"nc" creates a generic TCP connection to a port on a server. we can use nc to
connect to port 30000 on destination "localhost" (the same server we're
currently on). once a connection is established, the server waits for input
from us, and when we give it the password for bandit14, it returns "Correct!"
and the password for bandit15.

found: password for bandit15 via nc connection to port 30000 on localhost -
jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt
    >nc localhost 30000
    >fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq (password for bandit14)

-------------------------------------------------------------------------------

bandit15

the password for bandit16 is received when submitting the password for bandit15
to port 30001 on localhost via an openssl connection.

"openssl" is a crazy large tool used for a wide variety of encryption and
security purposes. we can use the subtool "s_client" to create a test client to
talk to a destination securely via openssl.

once we make the connection using openssl, a bunch of information about
handshake steps and certificates is printed, and then we can send data to the
server using standard input (as in bandit14). when we paste in the password for
bandit15, it again returns "Correct!" and also the password for bandit16.

like in bandit14, there was no prompt telling me to enter the password. once
the connection was open, it listened for my input. however, while it set up the
connection, it printed out a bunch of information (as mentioned above). at the
end, it printed "read R BLOCK", which at first appeared to be an error (based
on the note on the bandit15->bandit16 page). however, research into the manual
of openssl s_client revealed that the message was just a debugging message, was
not an error, and that the flag which OverTheWire mentioned was just to quiet
some specific messages (here, trying to read an EOF char).

found: password for bandit16 via openssl connection to port 30001 on localhost
- JQttfApK4SeyHwDlI9SXGR50qclOAil1
    >openssl s_client -connect localhost:30001
     (s_client is the openssl tool that creates a simple client for testing)
    >jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt (password for bandit15)

-------------------------------------------------------------------------------

bandit16

password for bandit17 received by submitting password for bandit16 to a
specific port on localhost in range 31000 to 32000.

we can use "nmap" to find open ports on localhost. we can specify which ports
to scan using the "-p[startport]-[endport]" flag, and we can identify which
services each of these ports are offering using the "-sV" flag.

from this nmap scan, we find that there are five open ports. ports 31046,
31691, and 31960 are open and just echo back what you send it. port 31518 is an
ssl port, but also just echoes. port 31790 is an ssl port and it's function is
unknown by nmap (so it's probably the right one).

we do the same type of openssl connection as in bandit15, but this time to
localhost at port 31790. once the connection opens and we paste the password
for bandit16, the server returns "Correct!" and also an ssh-rsa private key.

we close the connection and exit our remote ssh into bandit16, then create a
file on our own machine and paste into it the ssh-rsa key from our connection
with port 31790. then, we ssh into bandit17 using the private key, and get the
password for bandit17 from /etc/bandit_pass/bandit17.

one thing to note is that an ssh connection from bandit16 to bandit17 does not
seem to be possible, as restrictions are in place to "conserve resources", so
the private key needs to be stored on one's personal machine.

found: password for bandit17 in /etc/bandit_pass/bandit17 (only viewable by
bandit17) - VwOSWtCA7lRKkTfbr2IDh6awj9RNZM5e
    >nmap -sV -p31000-32000 localhost
    >openssl s_client -connect localhost:31790
    >JQttfApK4SeyHwDlI9SXGR50qclOAil1 (password for bandit16)
     (copy ssh-rsa private key)
    >exit
    >vi bandit17.private
     (paste in entire ssh-rsa private key)
    >ssh -p 2220 -i bandit17.private bandit17@bandit.labs.overthewire.org
    >cat /etc/bandit_pass/bandit17

-------------------------------------------------------------------------------

bandit17

password for bandit18 is the only line in passwords.new which is different from
passwords.old (both files in the home dir).

we can use "diff" to compare the contents of two files. here, diff reveals that
line 42 changed between the two files and is the only difference. also, since
diff takes two files as arguments, the "<" indicates the changes in the first
argument, while the ">" indicates the changes in the second argument.

found: password for bandit18 in passwords.new -
hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg
    >diff passwords.old passwords.new

-------------------------------------------------------------------------------

bandit18

password for bandit19 is stored in a file called readme in the home directory.
however, .bashrc has been modified so that any ssh connection is immediately
logged out.

we can execute a command on the destination machine with ssh. thus, we simply
execute the same ssh command to login to bandit18 and append "cat readme" to it
to find the password for bandit19.

found: password for bandit19 in readme - awhqfNnAbc1naukrpqDYcF95h7HoMTrC
    >ssh -p 2220 bandit18@bandit.labs.overthewire.org cat readme

-------------------------------------------------------------------------------

bandit19

password for bandit20 is only stored in /etc/bandit_pass/bandit20, which is
readable only by bandit20.

there is a binary in the home directory called "bandit20-do", which allows a
command to be run as bandit20. we can thus use this command to simply read the
contents of /etc/bandit_pass/bandit20 to get the password for bandit20.

found: password for bandit20 in /etc/bandit_pass/bandit20 - 
VxCazJaVykI6W36BkBU0mJTCM8rR95XT
    >ls
    >./bandit20-do
    >./bandit20-do cat /etc/bandit_pass/bandit20

-------------------------------------------------------------------------------

bandit20

password for bandit21 is received when the binary suconnect reads the password
for bandit20.

"suconnect" is a binary which, when run, connects to a specified port on 
localhost and listens for data. If it receives the password for bandit20, it
responds with the password for bandit21.

"tmux" allows us to "multiplex" our terminal, or create multiple terminals that
can be accessed and controlled on a single screen. we can create two detachable
terminals using tmux, and set up a TCP listening server on one of them with nc.
then, in the other terminal, we connect to the listening server with suconnect.
finally, we switch back to the first terminal (the listening server) and enter
the password for bandit20. this will get sent to the suconnect process, which
confirms that it's bandit20's password and transmits back the password for
bandit21.

found: password for bandit21 via suconnect binary - 
NvEJF7oVjkddltPSrdKEFOllh9V1IBcq
    >ls
    >tmux
    >nc -lknvp 34512 (set up a TCP server listening at port 34512)
    >Ctrl-b d (detach current screen)
    >tmux
    >./suconnect
    >Ctrl-b ( (switch to previous tmux screen)
    >VxCazJaVykI6W36BkBU0mJTCM8rR95XT (password for bandit20)
