Notes for bandit wargames.

-------------------------------------------------------------------------------

bandit0

ssh into system with "ssh -p 2220 bandit0@bandit.labs.overthewire.org"
password: bandit0

found: password for bandit1 in "readme" - NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL
    >ls
    >cat readme

-------------------------------------------------------------------------------

bandit1

password for bandit2 stored in file with name "-" in home dir
"-" shows up with ls, but "cat -" means that cat starts reading from stdin
    fixed by using a slightly extended filepath: "./-"

found: password for bandit2 in "-" - rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi
    >ls
    >cat ./-

-------------------------------------------------------------------------------

bandit2

password for bandit3 stored in file with name "spaces in this filename" in home
dir
commands don't like spaces in file names, but this can be fixed by wrapping the
filename in quotes: 'cat "spaces in this filename"'

found: password for bandit3 in "spaces in this filename" - 
aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG
    >ls
    >cat "spaces in this filename"

-------------------------------------------------------------------------------

bandit3

password for bandit4 stored in hidden file ".hidden" in subdirectory "inhere". 
hidden files can be found using "ls -a"

found: password for bandit4 in "~/inhere/.hidden" - 
2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe
    >ls
    >cd inhere
    >ls -a
    >cat .hidden

-------------------------------------------------------------------------------

bandit4

password for bandit5 stored in only human readable file in subdirectory 
"inhere". the command "file" takes a filename and returns the type of the file.

an ls of ~/inhere/ shows that there exist files -file00 through -file09. we can
run file on all of them via the command "file ./-file*", where the star is a
regex for any following character sequence. (note the ./ in the filepath to get
around the "-" in the filenames.) executing this command reveals that -file07
is the only "ASCII text" type file, and that all others are type "data". 

found: password for bandit5 in "~/inhere/-file07" - 
lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR
    >ls
    >cd inhere
    >file ./-file*
    >cat ./-file07

-------------------------------------------------------------------------------

bandit5

password for bandit6 stored in a file which is human-readable, 1033 bytes in
size, and not executable. home directory has folder "inhere", which has 20
subdirectories of its own.

"find" is a helpful command here. we can test for correct file size using 
"-size 1033c", and we can test whether a file is executable using "-executable",
(negated using "!"). 

we can then take the files that match and run "file" on them, such that we see 
which are human-readable. this can be done with find's "-exec" flag, which 
executes a given command.

found: password for bandit6 in "~/inhere/maybehere07/.file2" - 
P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU
    >cd inhere
    >find -size 1033c \! -executable -exec find '{}' \;
    (some esacping done to protect certain characters from interpretation by
     the shell; {} replaced in execution of "file" as current filename)

-------------------------------------------------------------------------------

bandit6

password for bandit7 stored in a file somewhere on the server which is owned by
bandit7, in group bandit6, and is 33 bytes long.

the find command can deal with all of these. the flag "-group bandit6" filters
out files not in the right group, "-user bandit7" filters out files not owned
by the correct user, and "-size 33c" filters out files that aren't 33 bytes in
size. we can also tell find to start from the root dir (/).

found: password for bandit7 in "/var/lib/dpkg/info/bandit7.password" - 
z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S
    >find / -user bandit7 -group bandit6 -size 33c 2>&-
     ("2>&-" filters out all permission denied errors by closing stderr)
    >cat /var/lib/dpkg/info/bandit7.password

-------------------------------------------------------------------------------

bandit7

password for bandit8 stored in data.txt next to the word "millionth".

grep allows us to search files for matching expressions. in this case, data.txt
is formatted such that each line is a word, followed by a tab, followed by a
password. we can grep data.txt for the "millionth" to return the line which
contains "millionth" and get the password stored in the same line.

found: password for bandit8 in "data.txt" - TESKZC0XvTetK0S9xNwm25STk5iWrBvP
    >ls
    >grep millionth data.txt

-------------------------------------------------------------------------------

bandit8

password for bandit9 is the only unique line in data.txt.

"uniq" allows us to display or omit duplicated lines. however, it only counts a
line as duplicated if the duplicated lines are adjacent. fortunately, we can
sort the lines in data.txt using the "sort" command, and then we can pipe the
output of sort into unique to find the single unique line in the file.

found: password for bandit9 in "data.txt" - EN632PlfYiZbn3PhVK3XOGSlNInNE00t
    >ls
    >sort data.txt | uniq -u

-------------------------------------------------------------------------------

bandit9

password for bandit10 is stored in the binary file data.txt as one of the few 
human-readable strings in the file, preceded by several equal signs.

"strings" displays all of the human-readable strings in a file. we can use
strings on data.txt, and then filter the output to only show lines with three
or more "=" characters by piping the output into grep.

found: password for bandit10 in "data.txt" - G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s
    >ls
    >strings data.txt | grep ===

-------------------------------------------------------------------------------

bandit10

password for bandit11 is stored in the base64 encoded file data.txt.

files can be encoded in base64 for a variety of reasons. "base64" allows for
encoding and decoding of files in the command line. a file encoded in base64
can be decoded using the "-d" flag.

found: password for bandit11 in decoded "data.txt" - 
6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM
    >ls
    >base64 -d data.txt

-------------------------------------------------------------------------------

bandit11

password for bandit12 is stored in data.txt, where each of [A-Z] and [a-z] have
been "rotated" 13 positions.

"tr" translates one set of characters to another set of characters. we can
design one tr command to rotate all uppercase characters 13 positions, and
another to rotate all lowercase characters 13 positions, and combine them to
decode the "data.txt" file.

found: password for bandit12 in decoded "data.txt" -
JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv
    >ls
    >cat data.txt | tr [:upper:] NOPQRSTUVWXYZABCDEFGHIJKLM | tr [:lower:]
     nopqrstuvwxyzabcdefghijklm

-------------------------------------------------------------------------------

bandit12

password for bandit13 is stored in data.txt, which has been compressed multiple
times.

we can uncompress a file using "gzip", "bzip2", or "tar", depending on the 
file's format. we can check the file format using "file". whenever we extract a
file to an output file, we use file to see which type of compression the output
file is under, then we rename the output file to have the appropriate suffix,
extract it with the appropriate command, and repeat.

found: password for bandit13 in decompressed "data8" -
wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw
    >ls
    >xxd -r data.txt data
    >file data
    >mv data data.gz
    >gzip -d data.gz
     (gzip -d creates output file with same name as input file, without suffix)
    >file data
    >mv data data.bz2
    >bzip -d data.bz2
     (bzip2 names output files like gzip)
    >file data
    >mv data data.gz
    >gzip -d data.gz
    >file data
    >mv data data.tar
    >tar -xvf data.tar
     (tar prints name of output file)
    >file data5.bin
    >tar -xvf data5.bin
    >file data6.bin
    >mv data6.bin data6.bz2
    >bzip2 -d data6.bz2
    >file data6
    >tar -xvf data6
    >file data8.bin
    >mv data8.bin data8.gz
    >gzip -d data8.gz
    >file data8
    >cat data8

-------------------------------------------------------------------------------

bandit13

...
